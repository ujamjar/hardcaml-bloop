(* calculate complement using positional cube notation.
 * check result by proving f <> f' (ie [tautology (f ^ f')] *)

open Printf
open HardCamlBloop
open Expr
open Pcn

(* a bunch of functions in SOP form.  -ve indices represent a complement *)

let t0 = 5, [
  [ 2; 3; 4];
  [ -1; 5];
  [ 1; -3; -4];
]

let t1 = 6, [
  [ 1;  3; -5;];
  [ 3;  4;  5; -6];
  [-1;  2;  6;];
  [ 1; -2; -3;  4; 5];
  [-4; -5;  6;];
  [ 1;  4;  6;];
  [ 2;  3; -5;];
  [ 1;  2;  3;  4];
]

let t2 = 6, [
  [-1; -2;  3;  4;  5;  6 ]; 
  [-1; -2; -3;  4;  5;  6 ];
  [ 1;  3; -4;  5;  6; ];
  [-2;  3; -4;  5;  6; ];
  [ 1; -3; -4;  5;  6; ];
  [-2; -3; -4;  5;  6; ];
  [-1; -2;  3;  4; -5;  6 ];
  [-1; -2; -3;  4; -5;  6 ];
  [ 3; -4;  5; -6; ];
  [-1; -3;  5; -6; ];
  [ 2; -3;  5; -6; ];
  [-3; -4;  5; -6; ];
  [-1; -2;  3;  4; -5; -6 ];
  [-3;  4; -5; -6; ];
  [-1; -2;  3; -4; -5; -6 ];
  [-3; -4; -5; -6; ];
]

let t3 = 8, [
  [-1; -2; -3; -4; -5; -6; -7; 8;]; 
  [-1; -2; -3; -4; -5; -6; 7; -8;]; 
  [-1; -2; -3; -4; -5; 6; -7; -8;]; 
  [-1; -2; -3; -4; -5; 6; 7; 8;]; 
  [-1; -2; -3; -4; 5; -6; -7; -8;]; 
  [-1; -2; -3; -4; 5; -6; 7; 8;]; 
  [-1; -2; -3; -4; 5; 6; -7; 8;]; 
  [-1; -2; -3; -4; 5; 6; 7; -8;]; 
  [-1; -2; -3; 4; -5; -6; -7; -8;]; 
  [-1; -2; -3; 4; -5; -6; 7; 8;]; 
  [-1; -2; -3; 4; -5; 6; -7; 8;]; 
  [-1; -2; -3; 4; -5; 6; 7; -8;]; 
  [-1; -2; -3; 4; 5; -6; -7; 8;]; 
  [-1; -2; -3; 4; 5; -6; 7; -8;]; 
  [-1; -2; -3; 4; 5; 6; -7; -8;]; 
  [-1; -2; -3; 4; 5; 6; 7; 8;]; 
  [-1; -2; 3; -4; -5; -6; -7; -8;]; 
  [-1; -2; 3; -4; -5; -6; 7; 8;]; 
  [-1; -2; 3; -4; -5; 6; -7; 8;]; 
  [-1; -2; 3; -4; -5; 6; 7; -8;]; 
  [-1; -2; 3; -4; 5; -6; -7; 8;]; 
  [-1; -2; 3; -4; 5; -6; 7; -8;]; 
  [-1; -2; 3; -4; 5; 6; -7; -8;]; 
  [-1; -2; 3; -4; 5; 6; 7; 8;]; 
  [-1; -2; 3; 4; -5; -6; -7; 8;]; 
  [-1; -2; 3; 4; -5; -6; 7; -8;]; 
  [-1; -2; 3; 4; -5; 6; -7; -8;]; 
  [-1; -2; 3; 4; -5; 6; 7; 8;]; 
  [-1; -2; 3; 4; 5; -6; -7; -8;]; 
  [-1; -2; 3; 4; 5; -6; 7; 8;]; 
  [-1; -2; 3; 4; 5; 6; -7; 8;]; 
  [-1; -2; 3; 4; 5; 6; 7; -8;]; 
  [-1; 2; -3; -4; -5; -6; -7; -8;]; 
  [-1; 2; -3; -4; -5; -6; 7; 8;]; 
  [-1; 2; -3; -4; -5; 6; -7; 8;]; 
  [-1; 2; -3; -4; -5; 6; 7; -8;]; 
  [-1; 2; -3; -4; 5; -6; -7; 8;]; 
  [-1; 2; -3; -4; 5; -6; 7; -8;]; 
  [-1; 2; -3; -4; 5; 6; -7; -8;]; 
  [-1; 2; -3; -4; 5; 6; 7; 8;]; 
  [-1; 2; -3; 4; -5; -6; -7; 8;]; 
  [-1; 2; -3; 4; -5; -6; 7; -8;]; 
  [-1; 2; -3; 4; -5; 6; -7; -8;]; 
  [-1; 2; -3; 4; -5; 6; 7; 8;]; 
  [-1; 2; -3; 4; 5; -6; -7; -8;]; 
  [-1; 2; -3; 4; 5; -6; 7; 8;]; 
  [-1; 2; -3; 4; 5; 6; -7; 8;]; 
  [-1; 2; -3; 4; 5; 6; 7; -8;]; 
  [-1; 2; 3; -4; -5; -6; -7; 8;]; 
  [-1; 2; 3; -4; -5; -6; 7; -8;]; 
  [-1; 2; 3; -4; -5; 6; -7; -8;]; 
  [-1; 2; 3; -4; -5; 6; 7; 8;]; 
  [-1; 2; 3; -4; 5; -6; -7; -8;]; 
  [-1; 2; 3; -4; 5; -6; 7; 8;]; 
  [-1; 2; 3; -4; 5; 6; -7; 8;]; 
  [-1; 2; 3; -4; 5; 6; 7; -8;]; 
  [-1; 2; 3; 4; -5; -6; -7; -8;]; 
  [-1; 2; 3; 4; -5; -6; 7; 8;]; 
  [-1; 2; 3; 4; -5; 6; -7; 8;]; 
  [-1; 2; 3; 4; -5; 6; 7; -8;]; 
  [-1; 2; 3; 4; 5; -6; -7; 8;]; 
  [-1; 2; 3; 4; 5; -6; 7; -8;]; 
  [-1; 2; 3; 4; 5; 6; -7; -8;]; 
  [-1; 2; 3; 4; 5; 6; 7; 8;]; 
  [1; -2; -3; -4; -5; -6; -7; -8;]; 
  [1; -2; -3; -4; -5; -6; 7; 8;]; 
  [1; -2; -3; -4; -5; 6; -7; 8;]; 
  [1; -2; -3; -4; -5; 6; 7; -8;]; 
  [1; -2; -3; -4; 5; -6; -7; 8;]; 
  [1; -2; -3; -4; 5; -6; 7; -8;]; 
  [1; -2; -3; -4; 5; 6; -7; -8;]; 
  [1; -2; -3; -4; 5; 6; 7; 8;]; 
  [1; -2; -3; 4; -5; -6; -7; 8;]; 
  [1; -2; -3; 4; -5; -6; 7; -8;]; 
  [1; -2; -3; 4; -5; 6; -7; -8;]; 
  [1; -2; -3; 4; -5; 6; 7; 8;]; 
  [1; -2; -3; 4; 5; -6; -7; -8;]; 
  [1; -2; -3; 4; 5; -6; 7; 8;]; 
  [1; -2; -3; 4; 5; 6; -7; 8;]; 
  [1; -2; -3; 4; 5; 6; 7; -8;]; 
  [1; -2; 3; -4; -5; -6; -7; 8;]; 
  [1; -2; 3; -4; -5; -6; 7; -8;]; 
  [1; -2; 3; -4; -5; 6; -7; -8;]; 
  [1; -2; 3; -4; -5; 6; 7; 8;]; 
  [1; -2; 3; -4; 5; -6; -7; -8;]; 
  [1; -2; 3; -4; 5; -6; 7; 8;]; 
  [1; -2; 3; -4; 5; 6; -7; 8;]; 
  [1; -2; 3; -4; 5; 6; 7; -8;]; 
  [1; -2; 3; 4; -5; -6; -7; -8;]; 
  [1; -2; 3; 4; -5; -6; 7; 8;]; 
  [1; -2; 3; 4; -5; 6; -7; 8;]; 
  [1; -2; 3; 4; -5; 6; 7; -8;]; 
  [1; -2; 3; 4; 5; -6; -7; 8;]; 
  [1; -2; 3; 4; 5; -6; 7; -8;]; 
  [1; -2; 3; 4; 5; 6; -7; -8;]; 
  [1; -2; 3; 4; 5; 6; 7; 8;]; 
  [1; 2; -3; -4; -5; -6; -7; 8;]; 
  [1; 2; -3; -4; -5; -6; 7; -8;]; 
  [1; 2; -3; -4; -5; 6; -7; -8;]; 
  [1; 2; -3; -4; -5; 6; 7; 8;]; 
  [1; 2; -3; -4; 5; -6; -7; -8;]; 
  [1; 2; -3; -4; 5; -6; 7; 8;]; 
  [1; 2; -3; -4; 5; 6; -7; 8;]; 
  [1; 2; -3; -4; 5; 6; 7; -8;]; 
  [1; 2; -3; 4; -5; -6; -7; -8;]; 
  [1; 2; -3; 4; -5; -6; 7; 8;]; 
  [1; 2; -3; 4; -5; 6; -7; 8;]; 
  [1; 2; -3; 4; -5; 6; 7; -8;]; 
  [1; 2; -3; 4; 5; -6; -7; 8;]; 
  [1; 2; -3; 4; 5; -6; 7; -8;]; 
  [1; 2; -3; 4; 5; 6; -7; -8;]; 
  [1; 2; -3; 4; 5; 6; 7; 8;]; 
  [1; 2; 3; -4; -5; -6; -7; -8;]; 
  [1; 2; 3; -4; -5; -6; 7; 8;]; 
  [1; 2; 3; -4; -5; 6; -7; 8;]; 
  [1; 2; 3; -4; -5; 6; 7; -8;]; 
  [1; 2; 3; -4; 5; -6; -7; 8;]; 
  [1; 2; 3; -4; 5; -6; 7; -8;]; 
  [1; 2; 3; -4; 5; 6; -7; -8;]; 
  [1; 2; 3; -4; 5; 6; 7; 8;]; 
  [1; 2; 3; 4; -5; -6; -7; 8;]; 
  [1; 2; 3; 4; -5; -6; 7; -8;]; 
  [1; 2; 3; 4; -5; 6; -7; -8;]; 
  [1; 2; 3; 4; -5; 6; 7; 8;]; 
  [1; 2; 3; 4; 5; -6; -7; -8;]; 
  [1; 2; 3; 4; 5; -6; 7; 8;]; 
  [1; 2; 3; 4; 5; 6; -7; 8;]; 
  [1; 2; 3; 4; 5; 6; 7; -8;]; 
]

let t4 = 10, [
  [1; 2; -3; 4; 5; 6; 7; 8; 9;]; 
  [1; 2; -3; 4; 5; 6; 7; 8; -9;]; 
  [1; 2; -3; 4; 5; 6; 7; -8; 9;]; 
  [1; 2; -3; 4; 5; 6; 7; -8; -9;]; 
  [1; 2; -3; 4; 5; -6; 7; 8; 9;]; 
  [1; 2; -3; 4; 5; -6; 7; 8; -9;]; 
  [1; 2; -3; 4; 5; -6; 7; -8; 9;]; 
  [1; 2; -3; 4; 5; -6; 7; -8; -9;]; 
  [1; -2; -3; 4; 5; 6; 7; 8; 9;]; 
  [1; -2; -3; 4; 5; 6; 7; 8; -9;]; 
  [1; -2; -3; 4; 5; 6; 7; -8; 9;]; 
  [1; -2; -3; 4; 5; 6; 7; -8; -9;]; 
  [1; -2; -3; 4; 5; -6; 7; 8; 9;]; 
  [1; -2; -3; 4; 5; -6; 7; 8; -9;]; 
  [1; -2; -3; 4; 5; -6; 7; -8; 9;]; 
  [1; -2; -3; 4; 5; -6; 7; -8; -9;]; 
  [-1; 2; -3; 4; 5; 6; 7; 8; 9;]; 
  [-1; 2; -3; 4; 5; 6; 7; 8; -9;]; 
  [-1; 2; -3; 4; 5; 6; 7; -8; 9;]; 
  [-1; 2; -3; 4; 5; 6; 7; -8; -9;]; 
  [-1; 2; -3; 4; 5; 6; -7; 8; 9;]; 
  [-1; 2; -3; 4; 5; 6; -7; 8; -9;]; 
  [-1; 2; -3; 4; 5; 6; -7; -8; 9;]; 
  [-1; 2; -3; 4; 5; 6; -7; -8; -9;]; 
  [-1; 2; -3; 4; 5; -6; 7; 8; 9;]; 
  [-1; 2; -3; 4; 5; -6; 7; 8; -9;]; 
  [-1; 2; -3; 4; 5; -6; 7; -8; 9;]; 
  [-1; 2; -3; 4; 5; -6; 7; -8; -9;]; 
  [-1; 2; -3; 4; 5; -6; -7; 8; 9;]; 
  [-1; 2; -3; 4; 5; -6; -7; 8; -9;]; 
  [-1; 2; -3; 4; 5; -6; -7; -8; 9;]; 
  [-1; 2; -3; 4; 5; -6; -7; -8; -9;]; 
  [1; 2; 3; 4; 5; 6; 7; -8; 10;]; 
  [1; 2; 3; 4; -5; 6; 7; -8; 10;]; 
  [1; 2; 3; -4; 5; 6; 7; -8; 10;]; 
  [1; 2; 3; -4; -5; 6; 7; -8; 10;]; 
  [1; 2; -3; 4; 5; 6; 7; -8; 10;]; 
  [1; 2; -3; 4; -5; 6; 7; -8; 10;]; 
  [1; 2; -3; -4; 5; 6; 7; -8; 10;]; 
  [1; 2; -3; -4; -5; 6; 7; -8; 10;]; 
  [-1; 2; 3; 4; 5; 6; 7; -8; 10;]; 
  [-1; 2; 3; 4; -5; 6; 7; -8; 10;]; 
  [-1; 2; 3; -4; 5; 6; 7; -8; 10;]; 
  [-1; 2; 3; -4; -5; 6; 7; -8; 10;]; 
  [-1; 2; -3; 4; 5; 6; 7; -8; 10;]; 
  [-1; 2; -3; 4; -5; 6; 7; -8; 10;]; 
  [-1; 2; -3; -4; 5; 6; 7; -8; 10;]; 
  [-1; 2; -3; -4; -5; 6; 7; -8; 10;]; 
  [1; 2; 3; 4; 5; 6; 7; 8; -9;]; 
  [1; 2; 3; 4; 5; 6; -7; 8; -9;]; 
  [1; 2; 3; 4; 5; -6; 7; 8; -9;]; 
  [1; 2; 3; 4; 5; -6; -7; 8; -9;]; 
  [1; -2; 3; 4; 5; 6; 7; 8; -9;]; 
  [1; -2; 3; 4; 5; 6; -7; 8; -9;]; 
  [1; -2; 3; 4; 5; -6; 7; 8; -9;]; 
  [1; -2; 3; 4; 5; -6; -7; 8; -9;]; 
  [-1; 2; 3; 4; 5; 6; 7; 8; -9;]; 
  [-1; 2; 3; 4; 5; 6; -7; 8; -9;]; 
  [-1; 2; 3; 4; 5; -6; 7; 8; -9;]; 
  [-1; 2; 3; 4; 5; -6; -7; 8; -9;]; 
  [-1; -2; 3; 4; 5; 6; 7; 8; -9;]; 
  [-1; -2; 3; 4; 5; 6; -7; 8; -9;]; 
  [-1; -2; 3; 4; 5; -6; 7; 8; -9;]; 
  [-1; -2; 3; 4; 5; -6; -7; 8; -9;]; 
  [1; 2; 3; -4; 5; 7; 8; 9; 10;]; 
  [1; 2; 3; -4; -5; 7; 8; 9; 10;]; 
  [1; 2; -3; -4; 5; 7; 8; 9; 10;]; 
  [1; 2; -3; -4; -5; 7; 8; 9; 10;]; 
  [1; -2; 3; -4; 5; 7; 8; 9; 10;]; 
  [1; -2; 3; -4; -5; 7; 8; 9; 10;]; 
  [1; -2; -3; -4; 5; 7; 8; 9; 10;]; 
  [1; -2; -3; -4; -5; 7; 8; 9; 10;]; 
  [-1; 2; 3; -4; 5; 7; 8; 9; 10;]; 
  [-1; 2; 3; -4; -5; 7; 8; 9; 10;]; 
  [-1; 2; -3; -4; 5; 7; 8; 9; 10;]; 
  [-1; 2; -3; -4; -5; 7; 8; 9; 10;]; 
  [-1; -2; 3; -4; 5; 7; 8; 9; 10;]; 
  [-1; -2; 3; -4; -5; 7; 8; 9; 10;]; 
  [-1; -2; -3; -4; 5; 7; 8; 9; 10;]; 
  [-1; -2; -3; -4; -5; 7; 8; 9; 10;]; 
  [1; 2; 3; 4; -5; 6; 7; 9; 10;]; 
  [1; 2; 3; 4; -5; 6; -7; 9; 10;]; 
  [1; 2; 3; -4; -5; 6; 7; 9; 10;]; 
  [1; 2; 3; -4; -5; 6; -7; 9; 10;]; 
  [1; -2; 3; 4; -5; 6; 7; 9; 10;]; 
  [1; -2; 3; 4; -5; 6; -7; 9; 10;]; 
  [1; -2; 3; -4; -5; 6; 7; 9; 10;]; 
  [1; -2; 3; -4; -5; 6; -7; 9; 10;]; 
  [-1; 2; 3; 4; -5; 6; 7; 9; 10;]; 
  [-1; 2; 3; 4; -5; 6; -7; 9; 10;]; 
  [-1; 2; 3; -4; -5; 6; 7; 9; 10;]; 
  [-1; 2; 3; -4; -5; 6; -7; 9; 10;]; 
  [-1; -2; 3; 4; -5; 6; 7; 9; 10;]; 
  [-1; -2; 3; 4; -5; 6; -7; 9; 10;]; 
  [-1; -2; 3; -4; -5; 6; 7; 9; 10;]; 
  [-1; -2; 3; -4; -5; 6; -7; 9; 10;]; 
  [1; 2; 3; 4; 5; 6; -7; 8; 9;]; 
  [1; 2; 3; 4; 5; -6; -7; 8; 9;]; 
  [1; 2; -3; 4; 5; 6; -7; 8; 9;]; 
  [1; 2; -3; 4; 5; -6; -7; 8; 9;]; 
  [1; -2; 3; 4; 5; 6; -7; 8; 9;]; 
  [1; -2; 3; 4; 5; -6; -7; 8; 9;]; 
  [1; -2; -3; 4; 5; 6; -7; 8; 9;]; 
  [1; -2; -3; 4; 5; -6; -7; 8; 9;]; 
  [-1; 2; 3; 4; 5; 6; -7; 8; 9;]; 
  [-1; 2; 3; 4; 5; -6; -7; 8; 9;]; 
  [-1; -2; 3; 4; 5; 6; -7; 8; 9;]; 
  [-1; -2; 3; 4; 5; -6; -7; 8; 9;]; 
  [-1; -2; -3; 4; 5; 6; -7; 8; 9;]; 
  [-1; -2; -3; 4; 5; -6; -7; 8; 9;]; 
  [1; 2; 3; -4; 5; 6; -7; 8; 10;]; 
  [1; 2; 3; -4; 5; 6; -7; -8; 10;]; 
  [1; 2; 3; -4; -5; 6; -7; 8; 10;]; 
  [1; 2; 3; -4; -5; 6; -7; -8; 10;]; 
  [1; 2; -3; -4; 5; 6; -7; 8; 10;]; 
  [1; 2; -3; -4; 5; 6; -7; -8; 10;]; 
  [1; 2; -3; -4; -5; 6; -7; 8; 10;]; 
  [1; 2; -3; -4; -5; 6; -7; -8; 10;]; 
  [1; -2; 3; -4; 5; 6; -7; 8; 10;]; 
  [1; -2; 3; -4; 5; 6; -7; -8; 10;]; 
  [1; -2; 3; -4; -5; 6; -7; 8; 10;]; 
  [1; -2; 3; -4; -5; 6; -7; -8; 10;]; 
  [1; -2; -3; -4; 5; 6; -7; 8; 10;]; 
  [1; -2; -3; -4; 5; 6; -7; -8; 10;]; 
  [1; -2; -3; -4; -5; 6; -7; 8; 10;]; 
  [1; -2; -3; -4; -5; 6; -7; -8; 10;]; 
  [1; 2; -3; 4; 5; 6; 7; 9; -10;]; 
  [1; 2; -3; 4; 5; -6; 7; 9; -10;]; 
  [1; 2; -3; 4; -5; 6; 7; 9; -10;]; 
  [1; 2; -3; 4; -5; -6; 7; 9; -10;]; 
  [1; 2; -3; -4; 5; 6; 7; 9; -10;]; 
  [1; 2; -3; -4; 5; -6; 7; 9; -10;]; 
  [1; 2; -3; -4; -5; 6; 7; 9; -10;]; 
  [1; 2; -3; -4; -5; -6; 7; 9; -10;]; 
  [-1; 2; -3; 4; 5; 6; 7; 9; -10;]; 
  [-1; 2; -3; 4; 5; -6; 7; 9; -10;]; 
  [-1; 2; -3; 4; -5; 6; 7; 9; -10;]; 
  [-1; 2; -3; 4; -5; -6; 7; 9; -10;]; 
  [-1; 2; -3; -4; 5; 6; 7; 9; -10;]; 
  [-1; 2; -3; -4; 5; -6; 7; 9; -10;]; 
  [-1; 2; -3; -4; -5; 6; 7; 9; -10;]; 
  [-1; 2; -3; -4; -5; -6; 7; 9; -10;]; 
  [-1; 2; 3; 4; 5; 6; 7; -8; 9;]; 
  [-1; 2; 3; 4; 5; 6; 7; -8; -9;]; 
  [-1; 2; 3; 4; 5; -6; 7; -8; 9;]; 
  [-1; 2; 3; 4; 5; -6; 7; -8; -9;]; 
  [-1; 2; 3; 4; -5; 6; 7; -8; 9;]; 
  [-1; 2; 3; 4; -5; 6; 7; -8; -9;]; 
  [-1; 2; 3; 4; -5; -6; 7; -8; 9;]; 
  [-1; 2; 3; 4; -5; -6; 7; -8; -9;]; 
  [-1; 2; -3; 4; -5; 6; 7; -8; 9;]; 
  [-1; 2; -3; 4; -5; 6; 7; -8; -9;]; 
  [-1; 2; -3; 4; -5; -6; 7; -8; 9;]; 
  [-1; 2; -3; 4; -5; -6; 7; -8; -9;]; 
]

let compl = Complement.complement
let tautology = Tautology.check 

(* read sop form and create pcn *)
let mk_pcn (n_vars, cubes) = 
  Cubelist.of_list
    (List.map (fun c -> Cube.init n_vars (fun i ->
      if List.mem (i+1) c then T
      else if List.mem (-(i+1)) c then F
      else X)) cubes)

(* xor using pcn *)
let (^:) a b = 
  let (~:),(&:),(|:) = Pcn.Calculator.(not_, and_, or_) in
  ((~: a &: b) |: (a &: ~: b))

(* complement and check *)
let check test = 
  let f = mk_pcn test in
  let f' = compl f in
  printf "%b\n" (tautology (f ^: f'))

let () = check t0
let () = check t1
let () = check t2
let () = check t3
let () = check t4


